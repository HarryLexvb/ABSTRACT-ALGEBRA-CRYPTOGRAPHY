#include <iostream>
#include <NTL/ZZ.h>
#include <bitset>
#include <string>

using namespace NTL;
using namespace std;
int loop = 0;
//OPERACIONES
ZZ mod(ZZ a,ZZ b){
    ZZ r=a-(b*(a/b));
    if(r<0)r=b-r;
    return r;
}
bool even(ZZ a){
    if(mod(a,ZZ(2))==0) return 1;
    return 0;
}
ZZ ValAbs(ZZ a){
    if (a<0) return (a*-1);
    return a;
}

/*ZZ Fast_Exponentation(ZZ a, ZZ p, ZZ n){
    ZZ t;
    if(p == 0)return ZZ(1);

    if(even(p)){
        t = Fast_Exponentation(a, p/2, n);
        return mod((t*t),n);
    }
    t = Fast_Exponentation(a, (p-1)/2, n);
    return mod((a*(mod((t*t),n))),n);

}*/
ZZ Fast_Exponentation(ZZ a, ZZ p, ZZ n){
    ZZ t;
    if(p == 0) return ZZ(1);
    if(even(p)){
        t = Fast_Exponentation(a, p/2, n);
        //loop++;
        //cout << loop << endl;
        return mod((t*t),n);
    }else{
        t = Fast_Exponentation(a, (p-1)/2, n);
        //loop++;
        //cout << loop << endl;
        return mod((a*(mod((t*t),n))),n);
    }
}
ZZ Right_to_left_binary_exponentiation(ZZ g, ZZ e){
    ZZ A, S;
    A=1;
    S = g;
    while(e != 0){
        if(!even(e)){
            A = A*S;
        }
        e = e/2;
        if (e != 0){
            S = S*S;
        }
    }
    return A;
}
ZZ binary_expo_modular(ZZ a, ZZ n, ZZ m){
    ZZ result;
    result = ZZ(1);
    while( n != ZZ(0)) {
        if(!even(n))
            result = mod(result*a,m);
        a = mod(a*a,m);
        n >>= 1;
        //loop++;
        //cout << loop << endl;
    }
    return result;
}
ZZ naive_exponentiation(ZZ a, ZZ p, ZZ n){
    ZZ r;
    //ZZ loops= ZZ(0);
    r = 1;
    for(ZZ i = ZZ(0); i < p; ++i){
        r = mod((r*a),n);
        //loops++;
    }
    //cout << loops << endl;

    return r;
}


int main(){
    ZZ x,y,z;

    /*x = conv<ZZ>("55079");
    y = conv<ZZ>("46199");
    z = conv<ZZ>("91699");// */

    /*x = conv<ZZ>("2405004167");
    y = conv<ZZ>("4081426379");
    z = conv<ZZ>("9281423479"); // */

    /*x = conv<ZZ>("13899400287462393527");
    y = conv<ZZ>("13035181278446413343");
    z = conv<ZZ>("93035457658446413353");// */

    /*x = conv<ZZ>("265733069836953021104589357293605940039");
    y = conv<ZZ>("332093142905007608776794843088220507747");
    z = conv<ZZ>("932093142345678765434567843088567657747");// */

    /*x = conv<ZZ>("105418067230565229302401311614871856367337516926256261485610678970677326732123");
    y = conv<ZZ>("109042293343390780898239761338683269501466118148801677941583896581390895389239");
    z = conv<ZZ>("987654345676546765678889761338683269501466118456787654678765456787656876656239");// */

   /* x = conv<ZZ>("11067322688211763879127710781245770200266306579753149074670002771714059738841730056577765602839652195914873916936503030794140872851579504321364488742771259");
    y = conv<ZZ>("11413516010680777814127384311343725781113107913880221060918602136572207390773303280373413580351741864077594704984792022532979242718201697029247306420150367");
    z = conv<ZZ>("98765432345678765434567390773303280373413580351741864077594704987654567876543567876543456787654324567876543456787654345676545676545676889029247306420150367");// */

    /*x = conv<ZZ>("176656997303223902095560256491598180971380732993768921435351520271158961476748001277698565063028402764520109441247809203999420881922890353371040260979842426191177375275250990256146658405602103682083965762652790303682088948560995391904786385195323037525430801172918718937212475657313929650740839978361468109599");
    y = conv<ZZ>("115070940564609423248950030308388484379204458289391497531947979334249712955615806939521605721699749247585667798917677595682175003116940937714937814558746224442425625787010823518213049307194832092930084692458264138375677683938736736248673533557569390517618829849378633863611659739654707321890843736110745090553");
    z = conv<ZZ>("909876567898765678765678987678987678987678987678987678987898765456789876789876567876787678767899764347585667798917677595682175003116940937714937814558746224442425625787010823518213049307194832092930084692458264138375677683938736736248673533557569390517618829849378633863611659987654323456787654345678745090553");// */

    x = conv<ZZ>("176656997303223902095560256491598180971380732993768921435351520271158961476748001277698565063028402764520109441247809203999420881922890353371040260979842426191177375275250990256146658405602103682083911507094056460942324895003030838848437920445828939149753194797933424971295561580693952160572169974924758566779891767759568217500311694093771493781455874622444242562578701082351821304930719483209293008469245826413837567768393873673624867353355756939051761882984937863386361165973965470732189084373611074509055365762652790303682088948560995391904786385195323037525430801172918718937212475657313929650740839978361468109599");
    y = conv<ZZ>("115070940564609423248950030308388484379204458289391497531947979334249712955615806939521605721699749247585667798917677595682175003116940937714937814558746224442425625787010823518213049307194832092930084692458264131766569973032239020955602564915981809713807329937689214353515202711589614767480012776985650630284027645201094412478092039994208819228903533710402609798424261911773752752509902561466584056021036820839657626527903036820889485609953919047863851953230375254308011729187189372124756573139296507408399783614681095998375677683938736736248673533557569390517618829849378633863611659739654707321890843736110745090553");
    z = conv<ZZ>("987656787657876543456787654567876545678656787654678765467876545678765457129556158069395216057216997492475856677989176775956821750031169409377149378145587462244424256257870108235182130493071948320929300846924582641317665699730322390209556025649159818097138073299376892143535152027115896147674800127769856506302840276452010944124780920399942088192289035337104026097984242619117737527525099025614665840560210368208396576265279030368208894856099539190478638519532303752543080117291871893721247565731392965074083997836146810959983756776839387367362486735335575693905176987654345676543212345676543234567876598765434567650553");// */
    //cout << Fast_Exponentation(x,y,z)<<endl;
    cout << binary_expo_modular(x,y,z)<<endl;
    //cout << naive_exponentiation(x,y,z)<<endl;

}
